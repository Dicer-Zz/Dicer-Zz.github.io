{"pages":[{"title":"about","text":"Welcome!Hello, I’m Dicer. 欢迎来到我的小站，本站点仅用于存放个人blog和日记，所有内容由本人编撰或来自网络，如有侵权请联系我，Contact Me：dicer0615@outlook.com。 本站超酷的图片来自俄罗斯画师：Anton Fadeev，Ta的主页","link":"/about/index.html"}],"posts":[{"title":"2017浙江省赛","text":"碎碎念明天就又去郑轻了（噫，我为什么要说又，哦，上次天梯就是在郑轻），希望这次能取得一个好成绩！不能再这么菜下去了。 老毕再次KILL一道数位DP，这也太强了。我贡献一发构造题。 复盘早上起晚了，迟到30min，AB两题我到的时候已经Ａ掉了，然后mengshen在上机写Ｃ，然后我看Ｄ，老毕再看Ｇ，说是博弈，然而我根本不会博弈，于是继续看我的Ｄ，看完发现是一个普通的线段合并，觉得可写，此时mengshen还在改Ｃ，于是我给老毕讲了一下题意想让他写，但是讲着讲着发下原来的思路复杂了，其实直接两个人的线段全部丢在一起，直接判断重复区间就可以了，就把mengshen赶下来写Ｄ，写完测样例通过直接就交上去了，然后ＷＡ了，发现ＤＥＢＵＧ的输出没删除，删除掉ＡＣ。然后mengshen又上机写Ｃ，并改变了做法，３ＡＣ。然后Ｅ题数位ＤＰ丢给老毕没管过，看Ｆ，本来用的优先队列写了一个假算法，演了一发，然后找到了一组数据ｈａｃｋ了自己，发现是没有贪心，改用multiset贪心，写完测过样例交了，TLE，然后mengshen提议讲ＳＴＬ的lower_bound()换成multiset自带的，说是曾经在CF上看到过一个被lower_bound()卡时间的帖子，遂改，3ＡＣ。 总结最终６题，听说这套省赛题目难度挺大的，感觉打的还可以。 由于前天睡得太晚导致迟到实在不应该，老毕还是强啊，精通数位ＤＰ，还是要继续加油。","link":"/2019/04/12/2017-Zhejiang-provincial-competition/"},{"title":"2019CCPC河南省省赛","text":"碎碎念早上８点才出发，本来以为时间会很紧张，不过９点多一点就到了。不过没有参加开幕式。 复盘然后比赛开始，前两道水题签到很快就过了，然后发现有人在交A，但是都没过，mengshen猜了半天的假结论，直接被hack掉了，然后被通知A重判了，发现过了好几个队，然后仔细想了下，发现直接把每个行当做元素进行LIS就行了。然后我写了半天的LCS过了样例就交了一发，１WA，然后甚至还觉得自己写的很完美，演了半天，然后改抄白书模板自作聪明改了一点，过了样例，又交，２WA，演了大概30min，然后mengshen上机抄了一下模板，然后改了一下check两行之间关系的函数，成功３AC。 期间我看了F题，看了一下题面直接丢给了老毕，然后听他说好像有一个边界判错了浪费了好长时间DEBUG，不过最后还是过了，１A。 这个时候四题已经在金区了（好水），发现C，H都有人过，于是看C，H，以为Ｃ是跟前几天训练一样的multiset写法，然后发现不会两个multiset的合并，内存时间都可能爆炸。Ｈ是一个奇奇怪怪的搜索顺序，到最后都没弄明白。然后觉得可能还有其他题目能开，于是开始一道一道看，发现了Ｉ题是一个暴力剪枝很可行的题，而且很难造能卡主暴力的数据，于是我上机敲了一发暴力，1Ａ，之后一直在Ｃ，Ｈ两题之间倒腾但是并不会写。 结语最后５题水了个金，赞助商爸爸大气，每题一血还有５００现金，Ｉ题差４min一血，好可惜。 面包牛奶香蕉好评，就是面包有点油。上次天梯赛在郑轻的时候，键盘Ctrl特别硬，都摁不下去，这次好像机房升级了，全部ＨＰ的键盘鼠标，县显示器１０８０分辨率超级舒服，i7-8700的电脑用起来真的爽，郑州轻工业大学牛逼！体验极佳。","link":"/2019/04/13/2019-Henan-CCPC-provincial-competition/"},{"title":"hexo博客搭建总结","text":"序言之前使用jekyll在github上搭建了一个博客。但是，原博客不支持归档和搜索功能，主题也不是特别喜欢，于是决定重新搭建自己的博客站点。这次放弃了jekyll，使用hexo搭建。主要原因是hexo支持很多插件，且性能强悍。(相中了一个特别好看的主题)。 背景本文代码均基于阿里云Centos7服务器，Manjaro Linux客户端，与hexo引擎。 选择主题在搭建博客之前当然要选择一个自己喜欢的主题了。 可以在hexo的主题官方上挑选一个。戳我 注意挑选的时候不仅要看颜值，还要看一下自己需要的功能这个主题是否支持，当然如果你自己会添加插件，那就挑你最喜欢的就好了。 客户机配置安装Git 下载Git. 修改用户名和邮箱。 12345# 将此处的&quot;yourname&quot;替换成自己的用户名git config --global user.name &quot;yourname&quot;# 将此处的&quot;youremail&quot;替换成自己的邮箱git config --global user.email &quot;youremail&quot; 创建SSH钥匙对 检查是否存在钥匙对。 $ cd ~/.ssh 若没有钥匙对，则创建钥匙对。 $ ssh-keygen -t rsa -C “youremail” 安装Nodejs 使用命令行下载Nodejs。 检查是否下载完成。 $ node -v $ npm -v 安装Hexo框架 使用npm下载hexo $ npm install -g hexo-cli 因为一下原因，npm的下载速度十分感人，建议更换 选择一个你想要存放文件的文件夹，初始化blog。 $ hexo init blog 初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：&quot;hexo-deployer-git&quot;: &quot;^0.3.1&quot; 运行hexo $ hexo s 然后在浏览器输入：｀localhost:4000｀，如果出现hexo的界面就说明已经搭建成功了。 如果有包缺失，根据提示下载相应的包，再次尝试即可。 服务端配置首先，进行服务端的系统更新。 $ yum update -y 更新完系统后，输入一下代码查看系统版本。 $ cat /etc/centos-release 安装Nginx安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。1、配置Nginx官方源输入以下代码，新建一个文件以配置Nginx源 1$ vi /etc/yum.repos.d/nginx.repo 在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。 12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/gpgcheck=0enabled=1 2、安装Nginx输入以下代码进行安装。 1$ yum install nginx -y 3、启动Nginx并设置开机自启输入以下代码: 12$ systemctl start nginx$ systemctl enable nginx 进行到这里，你已经可以把服务器ip复制到浏览器就可以看到Nginx的欢迎界面了。 4、配置Nginx接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。) 1$ vi /etc/nginx/conf.d/default.conf 依照下图进行修改，将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。 至此，Nginx的配置就基本完成了。 安装Nodejs输入以下代码进行Nodejs的安装。 1$ yum install nodejs 可输入node -v以及npm -v查看node的版本。至此，Nodejs的安装就完成了。 安装Git以及进行相关配置1、输入以下代码，进行Git的安装 1$ yum install git 2、创建git用户以及设置密码输入以下代码： 1234# 创建用户,用户名为git$ adduser git# 设置密码$ passwd git 3、把git用户添加到sudo用户组中输入以下代码sudo vi /etc/sudoers，打开sudoers文件，输入:/root进行搜索，搜索到代码行root ALL=(ALL) ALL,然后在这一行下添加以下代码git ALL=(ALL) ALL。输入完毕之后，按wq!强制保存退出vi。 4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。输入以下代码： 123456# 切换用户$ su git# 创建目录$ mkdir ~/.ssh# 新建文件$ vim ~/.ssh/authorized_keys 然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。 接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下： 12$ chmod 600 ~/.ssh/authorized_keys$ chmod 700 ~/.ssh 设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器： 12# ServerIP为你自己服务器的ip$ ssh -v git@ServerIP 注意 SSH使用非对称加密，服务端不需要生成密钥对，而只需要一个authorized_keys文件，里面存放的是你客户端的公钥。客户端应该有密钥对id_rsa和id_rsa.pub文件，客户端的authorized_keys文件应该和id_rsa.pub文件内容一致。如果SSH免密码登录失败，请反复确认上述两点。 5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下： 123# 使用sudo指令，需要输入git用户的密码$ sudo mkdir -p /usr/share/nginx/html/blog$ sudo chown -R git:git /usr/share/nginx/html/blog 6、在服务器上初始化一个git裸库切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下： 123$ su git$ cd ~$ git init --bare blog.git 接着新建一个post-receive文件 1$ vim ~/blog.git/hooks/post-receive 然后在该文件中输入以下内容： 12#！/bin/shgit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/blog.git checkout -f 保存退出之后，再输入以下代码，赋予该文件可执行权限。 1$ chmod +x ~/blog.git/hooks/post-receive 7、返回客户端，设置博客根目录下的_config.yml文件。 12345deploy: type: git repo: git@SERVER:/home/git/blog.git #此处的SERVER需改为你自己服务器的ip branch: master #这里填写分支 message: #提交的信息 保存后，在博客根目录打开Git Bash，输入以下命令： 123$ hexo clean$ hexo g$ hexo d 部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。 引用fogcrane-基于CentOS搭建Hexo博客","link":"/2019/04/11/hexo_blog_construct_summary/"},{"title":"红楼梦札记","text":"小记昨天晚上看了一集木鱼水心做的87版红楼梦讲解，颇有兴趣，于是决定写一篇博客，记录个人感受。 说起来，曾经多次想要认真读完红楼梦原著却都不了了之，究其根本可能是我本人对其中复杂人物关系招架不住，毕竟在生活中我就不擅长这些事情。还有可能是因为书中前篇铺垫冗长，这种慢热的写法导致我还没看到精彩的部分就已经没了耐心。 确实如木鱼水心在第一篇中所说的那样，虽然同为四大名著，红楼梦却没用其他三本书那样人尽皆知。 至于我为什么想读这本书，可能因为高中的时候同学老师的不经意提起，对为何它能被评为“小说的巅峰”感到好奇，还有就是对书中所描述的美食十分感兴趣。 我为何不选择自己品读名著，观看电视剧？ 原因有二：１、没有太多的时间。２、觉得自己品读原著读不出来什么东西，很可能很快就放弃了。 本篇博客小标题与木鱼水心分p标题相同。 通灵宝玉入红尘，宝黛初会续前盟抄录 满纸荒唐言，一把辛酸泪。 都云作者痴，谁解其中味。 红尘之中美中不足且好事多磨，乐极生悲之时又人非物换，不过是到头一梦，万境归空。 好了歌 世人都道神仙好 惟有功名忘不了 古今将相在何方 荒冢一堆草末了","link":"/2019/04/23/reading-Dream-of-the-Red-Chamber/"}],"tags":[{"name":"Data structure","slug":"Data-structure","link":"/tags/Data-structure/"},{"name":"Dynamic programming","slug":"Dynamic-programming","link":"/tags/Dynamic-programming/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Server","slug":"Server","link":"/tags/Server/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"Book","slug":"Book","link":"/tags/Book/"}],"categories":[{"name":"Competition","slug":"Competition","link":"/categories/Competition/"},{"name":"Technology","slug":"Technology","link":"/categories/Technology/"},{"name":"Reading","slug":"Reading","link":"/categories/Reading/"}]}